from django.test import TestCase

from core.games.ConnectFour import ConnectFour


class ConnectFourTest(TestCase):
    def test_is_board_valid(self):
        self.assertTupleEqual(
            ConnectFour.is_board_valid(
                [
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            ),
            (True, None),
        )

        self.assertTupleEqual(
            ConnectFour.is_board_valid(
                [
                    ["*", "*", "*", "X", "*", "O", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            ),
            (True, None),
        )

        self.assertTupleEqual(
            ConnectFour.is_board_valid(
                [
                    ["*", "*", "X", "X", "X", "X", "*"],
                    ["*", "*", "O", "O", "O", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            ),
            (True, None),
        )

        self.assertFalse(
            ConnectFour.is_board_valid(
                [
                    ["*", "*", "X", "D", "X", "X", "*"],
                    ["*", "*", "O", "O", "O", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            )[0]
        )

        self.assertFalse(
            ConnectFour.is_board_valid(
                [
                    ["*", "X", "X", "*", "X", "X", "*"],
                    ["*", "*", "*", "O", "O", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            )[0]
        )

        self.assertFalse(
            ConnectFour.is_board_valid(
                [
                    ["*", "O", "X", "*", "X", "X", "*"],
                    ["*", "*", "*", "O", "O", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "X", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            )[0]
        )

    def test_is_valid_move(self):
        self.assertTrue(
            ConnectFour.is_valid_move(
                [
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ],
                0,
                0,
                0,
            )
        )

        self.assertFalse(
            ConnectFour.is_valid_move(
                [
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ],
                1,
                0,
                0,
            )
        )

        self.assertFalse(
            ConnectFour.is_valid_move(
                [
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ],
                0,
                7,
                1,
            )
        )

        self.assertFalse(
            ConnectFour.is_valid_move(
                [
                    ["*", "*", "*", "X", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ],
                1,
                0,
                3,
            )
        )

        self.assertFalse(
            ConnectFour.is_valid_move(
                [
                    ["*", "*", "*", "X", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ],
                1,
                2,
                3,
            )
        )

    def test_who_is_winner(self):
        self.assertIsNone(
            ConnectFour.who_is_winner(
                [
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            )
        )

        self.assertIsNone(
            ConnectFour.who_is_winner(
                [
                    ["*", "X", "X", "X", "*", "*", "*"],
                    ["*", "O", "O", "O", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            )
        )

        self.assertEqual(
            ConnectFour.who_is_winner(
                [
                    ["*", "X", "X", "X", "X", "*", "*"],
                    ["*", "O", "O", "O", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            ),
            0,
        )

        self.assertEqual(
            ConnectFour.who_is_winner(
                [
                    ["*", "X", "O", "*", "*", "*", "*"],
                    ["*", "X", "O", "*", "*", "*", "*"],
                    ["*", "X", "O", "*", "*", "*", "*"],
                    ["*", "X", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            ),
            0,
        )

        self.assertEqual(
            ConnectFour.who_is_winner(
                [
                    ["*", "X", "O", "X", "O", "*", "*"],
                    ["*", "*", "X", "O", "X", "*", "*"],
                    ["*", "*", "*", "X", "O", "*", "*"],
                    ["*", "*", "*", "*", "X", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            ),
            0,
        )

        self.assertEqual(
            ConnectFour.who_is_winner(
                [
                    ["*", "*", "X", "X", "X", "O", "*"],
                    ["*", "*", "O", "X", "O", "*", "*"],
                    ["*", "*", "X", "O", "*", "*", "*"],
                    ["*", "*", "O", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            ),
            1,
        )

        self.assertEqual(
            ConnectFour.who_is_winner(
                [
                    ["*", "*", "*", "X", "X", "*", "O"],
                    ["*", "*", "*", "*", "X", "*", "O"],
                    ["*", "*", "*", "*", "X", "*", "O"],
                    ["*", "*", "*", "*", "*", "*", "O"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                    ["*", "*", "*", "*", "*", "*", "*"],
                ]
            ),
            1,
        )

        self.assertEqual(
            ConnectFour.who_is_winner(
                [
                    ["X", "O", "O", "O", "*", "*", "*"],
                    ["X", "O", "O", "X", "*", "*", "*"],
                    ["X", "O", "O", "O", "*", "*", "*"],
                    ["O", "X", "X", "X", "*", "*", "*"],
                    ["*", "*", "X", "X", "*", "*", "*"],
                    ["*", "*", "*", "X", "*", "*", "*"],
                ]
            ),
            0,
        )

        self.assertEqual(
            ConnectFour.who_is_winner(
                list(
                    reversed(
                        [
                            ["*", "*", "*", "*", "*", "*", "O"],
                            ["*", "*", "*", "*", "*", "O", "O"],
                            ["*", "*", "*", "*", "O", "X", "X"],
                            ["*", "X", "*", "O", "X", "X", "X"],
                            ["*", "O", "*", "X", "O", "O", "O"],
                            ["*", "X", "*", "O", "X", "X", "X"],
                        ]
                    )
                )
            ),
            1,
        )

        self.assertEqual(
            ConnectFour.who_is_winner(
                list(
                    reversed(
                        [
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "X", "*", "*"],
                            ["*", "*", "*", "X", "X", "*", "*"],
                            ["*", "*", "X", "O", "O", "X", "*"],
                            ["*", "X", "O", "O", "O", "X", "*"],
                            ["*", "X", "O", "X", "O", "O", "*"],
                        ]
                    )
                )
            ),
            0,
        )

        self.assertEqual(
            ConnectFour.who_is_winner(
                list(
                    reversed(
                        [
                            ["X", "O", "X", "O", "X", "O", "O"],
                            ["X", "O", "X", "O", "X", "O", "X"],
                            ["O", "X", "O", "X", "O", "X", "O"],
                            ["O", "X", "O", "X", "O", "X", "O"],
                            ["X", "O", "X", "O", "X", "O", "X"],
                            ["X", "O", "X", "O", "X", "O", "X"],
                        ]
                    )
                )
            ),
            -1,
        )

    def test_who_is_going_to_move(self):
        self.assertEqual(
            ConnectFour.who_is_going_to_move(
                list(
                    reversed(
                        [
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                        ]
                    )
                )
            ),
            0,
        )

        self.assertEqual(
            ConnectFour.who_is_going_to_move(
                list(
                    reversed(
                        [
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "X", "*", "*", "*", "*"],
                            ["*", "X", "O", "*", "*", "*", "*"],
                        ]
                    )
                )
            ),
            1,
        )

    def test_move(self):
        self.assertListEqual(
            ConnectFour.move(
                list(
                    reversed(
                        [
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                        ]
                    )
                ),
                0,
                0,
                1,
            ),
            list(
                reversed(
                    [
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "X", "*", "*", "*", "*", "*"],
                    ]
                )
            ),
        )

        self.assertListEqual(
            ConnectFour.move(
                list(
                    reversed(
                        [
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "X", "O", "*", "*", "*", "*"],
                        ]
                    )
                ),
                1,
                0,
                0,
            ),
            list(
                reversed(
                    [
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "X", "O", "*", "*", "*", "*"],
                    ]
                )
            ),
        )

        self.assertListEqual(
            ConnectFour.move(
                list(
                    reversed(
                        [
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "*", "*", "*", "*", "*", "*"],
                            ["*", "X", "O", "*", "*", "*", "*"],
                        ]
                    )
                ),
                0,
                0,
                1,
            ),
            list(
                reversed(
                    [
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "X", "O", "*", "*", "*", "*"],
                    ]
                )
            ),
        )

    def test_available_moves(self):
        self.assertSetEqual(
            set(
                ConnectFour.available_moves(
                    [
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                    ]
                )
            ),
            {(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6)},
        )

        self.assertSetEqual(
            set(
                ConnectFour.available_moves(
                    [
                        ["*", "X", "*", "*", "*", "*", "O"],
                        ["*", "X", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                        ["*", "*", "*", "*", "*", "*", "*"],
                    ]
                )
            ),
            {(0, 0), (2, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 6)},
        )

    def test_render_board(self):
        self.assertListEqual(
            ConnectFour.render_board(
                list(
                    reversed(
                        [
                            ["*", "*", "*", "*", "*", "*", "O"],
                            ["*", "*", "*", "*", "*", "O", "O"],
                            ["*", "*", "*", "*", "O", "X", "X"],
                            ["*", "X", "*", "O", "X", "X", "X"],
                            ["*", "O", "*", "X", "O", "O", "O"],
                            ["*", "X", "*", "O", "X", "X", "X"],
                        ]
                    )
                )
            ),
            list(
                reversed(
                    [
                        ["", "", "", "", "", "", "🔴"],
                        ["", "", "", "", "", "🔴", "🔴"],
                        ["", "", "", "", "🔴", "🔵", "🔵"],
                        ["", "🔵", "", "🔴", "🔵", "🔵", "🔵"],
                        ["", "🔴", "", "🔵", "🔴", "🔴", "🔴"],
                        ["", "🔵", "", "🔴", "🔵", "🔵", "🔵"],
                    ]
                )
            ),
        )
